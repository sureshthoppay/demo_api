---

- name: Get all vCenter details from ONTAP Tools
  ansible.builtin.uri:
    url: "https://{{ ontap_tools_api_host }}/virtualization/api/v1/vcenters"
    validate_certs: false
    method: GET
    headers:
      x-auth: "{{ jwt_token }}"
    return_content: yes
  register: all_vcenter_info
  tags:
    - initial_setup
    - vm_info
    - create_vvol_ds
    - delete_vvol_ds
    - expand_vvol_ds
    - shrink_vvol_ds
    - register_vcenter
    - register_svm
    - create_datastore

- name: Save vCenter GUID as fact
  ansible.builtin.set_fact: 
    vc_guid: "{{ all_vcenter_info.json | community.general.json_query(vcquery) }}"
  vars:
    vcquery: "records[?hostname_or_ip == '{{ vcenter_host}}'].vcguid | [0]"
  tags:
    - initial_setup
    - vm_info
    - create_vvol_ds
    - delete_vvol_ds
    - expand_vvol_ds
    - shrink_vvol_ds
    - register_vcenter
    - register_svm
    - create_datastore

- name: Register vCenter {{ vcenter_host }} to ONTAP Tools
  ansible.builtin.uri:
    url: "https://{{ otvx_api_base }}/virtualization/api/v1/vcenters"
    validate_certs: false
    method: POST
    body_format: json
    body:
      hostname_or_ip: "{{ vcenter_host }}"
      port: "443"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
    headers:
      x-auth: "{{ jwt_token }}"
    return_content: yes
  register: vcenter_reg
  when: vc_guid == ''
  tags:
    - register_vcenter
    - initial_setup


- name: Save registered vCenter GUID as fact
  ansible.builtin.set_fact: 
    vc_guid: "{{ vcenter_reg.json.vcguid }}"
  when: vc_guid == ''
  tags:
    - register_vcenter
    - initial_setup



- name: Save SVM ID as fact
  ansible.builtin.set_fact: 
    svm_id: "{{ all_vcenter_info.json | json_query(svmquery) }}"
  vars:
    svmquery: "records[].storage_backends[?hostname_or_ip == '{{ svm_address }}'].storage_id | [0] | [0]"
  # when: all_vcenter_info is succeeded
  tags:
    - create_vvol_ds

- name: Save ONTAP Cluster ID as fact
  ansible.builtin.set_fact: 
    ontap_cluster_id: "{{ all_vcenter_info.json | community.general.json_query(ocquery) }}"
  vars:
    ocquery: "records[].storage_backends[?hostname_or_ip == '{{ ontap_cluster_hostname }}'].storage_id | [0] | [0]"
  # when: all_vcenter_info is succeeded
  tags:
    - initial_setup
    - never

- name: Register {{ ontap_cluster_hostname }} as local scope to {{ vcenter_host }}
  ansible.builtin.uri:
    url: "https://{{ otvx_api_base }}/virtualization/api/v1/vcenters/{{ vc_guid }}/storage-backends"
    validate_certs: false
    method: POST
    status_code: [201]
    body_format: json
    body:
      hostname_or_ip: "{{ ontap_cluster_hostname }}"
      username: "{{ ontap_cluster_username }}"
      password: "{{ ontap_cluster_password }}"
    headers:
      x-auth: "{{ jwt_token }}"
    return_content: yes
  register: global_reg
  when: ontap_cluster_id == ''
  tags:
    - initial_setup
    - never

- name: Register SVM {{ svm_address }} to {{ vcenter_host }}
  ansible.builtin.uri:
    url: "https://{{ otvx_api_base }}/virtualization/api/v1/vcenters/{{ vc_guid }}/storage-backends"
    validate_certs: false
    method: POST
    status_code: [201]
    body_format: json
    body:
      hostname_or_ip: "{{ svm_address }}"
      username: "{{ svm_username }}"
      password: "{{ svm_password }}"
    headers:
      x-auth: "{{ jwt_token }}"
    return_content: yes
  register: svm_reg
  when: svm_id == ''
  tags:
    - register_svm
    - create_vvol_ds
    - initial_setup

- name: Save registered SVM ID as fact
  ansible.builtin.set_fact: 
    svm_id: "{{ svm_reg.json.storage_id }}"
  when: svm_id == ''
  tags:
    - register_svm
    - create_vvol_ds

